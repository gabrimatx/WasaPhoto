openapi: 3.0.2
info:
  description: API for WasaPhoto project
  version: 1.0.0
  title: WasaPhoto API
  contact:
    email: matiddi.1985899@studenti.uniroma1.it

paths:
  /session/:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Maria
                  pattern: "Ë†.*?$"
                  minLength: 3
                  maxLength: 16
      responses:
        "201":
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    # change here if you decide to use an integer
                    # or any other type of identifier
                    type: string
                    example: "abcdef012345"
  /photos/:
    put:
      operationId: uploadPhoto
      summary: Upload a new photo
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                caption:
                  type: string
                  description: The caption of the photo
                file:
                  type: string
                  format: binary
                  description: The photo file
      responses:
        "201":
          description: Photo uploaded successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Photo" }
        "400":
          description: Bad request
          content:
            application/json:
              example:
                error: "Invalid request. Please provide a caption and a photo file."
  /photos/{photoId}/:
    delete:
      operationId: deletePhoto
      summary: Delete a photo that exists.
      parameters:
        - $ref: "#/components/parameters/photoId"
      responses:
        "201":
          description: Photo deleted successfully.
        "404":
          description: Photo not found.
  /photos/{photoId}/likes/:
    put:
      operationId: likePhoto
      summary: Add a like to the photo.
      responses:
        "200":
          description: Like successful.
        "400":
          description: Bad Request.
        "404":
          description: Photo not found.
  /photos/{photoId}/likes/{likeId}:
    delete:
      operationId: unlikePhoto
      summary: Remove like from the photo.
      responses:
        "200":
          description: Unlike successful.
        "400":
          description: Bad Request.
        "404":
          description: Like not found.
  /photos/{photoId}/comments/:
    put:
      operationId: commentPhoto
      summary: Add a comment to the photo.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: New comment for the photo.
      responses:
        "200":
          description: Comment post successful.
        "400":
          description: Bad Request.
        "404":
          description: Photo not found.
  /photos/{photoId}/comments/{commentId}:
    delete:
      operationId: uncommentPhoto
      summary: Remove comment from the photo.
      responses:
        "200":
          description: Comment removal successful.
        "400":
          description: Bad Request.
        "404":
          description: Comment not found.

  /users/{userId}/:
    post:
      summary: Set username for a user.
      operationId: setMyUserName
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user.
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: New name for the user.
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "404":
          description: User not found
    delete:
      operationId: createUser
      summary: Create new user profile.
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user to delete.
          schema:
            type: integer
      responses:
        "201":
          description: Deleted
        "400":
          description: Bad Request
        "404":
          description: User not found
    get:
      summary: Get user profile by ID
      description: Retrieve detailed information about a specific user.
      operationId: getUserProfile
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user to get.
          schema:
            type: integer
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }
        "404":
          description: User not found
  /users/{userId}/stream:
    get:
      summary: Get user's feed
      description: Retrieve the feed of the specified user.
      operationId: getMyStream
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                posts:
                  - id: 1
                    content: "This is a post."
                    timestamp: "2023-11-24T12:00:00Z"
                  - id: 2
                    content: "Another post."
                    timestamp: "2023-11-24T12:30:00Z"
        '404':
          description: User not found
  /users/{userId}/follows/:
    put:
      summary: Follow a user.
      operationId: followUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: Name of the new followed user.
      responses:
        "200":
          description: Follow successful.
        "400":
          description: Bad Request.
        "404":
          description: User not found.
  /users/{userId}/follows/{followId}:
    delete:
      summary: Unfollow a user.
      operationId: unfollowUser
      parameters:
        - name: followId
          in: path
          required: true
          description: ID of the follow to delete.
          schema:
            type: integer
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "404":
          description: User not found
  /users/{userId}/bans/:
    put:
      summary: Ban a user.
      operationId: banUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: Name of the new banned user.
      responses:
        "200":
          description: Ban successful.
        "400":
          description: Bad Request.
        "404":
          description: User not found.
  /users/{userId}/bans/{banId}:
    delete:
      summary: Unban a user.
      operationId: unbanUser
      parameters:
        - name: banId
          in: path
          required: true
          description: ID of the ban to remove.
          schema:
            type: integer
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "404":
          description: User not found

components:
  parameters:
    photoId:
      in: path
      name: photoId
      required: true
      schema:
        type: integer
    userId:
      in: path
      name: userId
      required: true
      schema:
        type: integer
    followId:
      in: path
      name: followId
      required: true
      schema:
        type: integer
    banId:
      in: path
      name: banId
      required: true
      schema:
        type: integer
    likeId:
      in: path
      name: likeId
      required: true
      schema:
        type: integer
    commentId:
      in: path
      name: commentId
      required: true
      schema:
        type: integer
  schemas:
    User:
      title: User
      description: User profile of a user.
      type: object
      required:
        - name
      properties:
        id:
          description: User identifier, uniquely generated.
          type: integer
          example: 32132131
          readOnly: true
        name:
          description: Name of the user.
          type: string
          example: Gabriele Matiddi
        followers:
          description: Followers of the user.
          type: array
          items:
            type: integer
            description: Ids of the users that follow the user.
        banned:
          description: Users banned from profile of the user.
          type: array
          items:
            type: integer
            description: Ids of the users that are banned by the user.
    Photo:
      title: Photo
      description: This object represents a photo in the system.
      type: object
      properties:
        id:
          description: Photo identifier, uniquely generated.
          type: integer
          example: 123456
          readOnly: true
        image_content:
          description: Content of the photo.
          type: string
          format: base64
          example: EXAMPLE HERE
        releaseDate:
          type: string
          description: Date and time of photo publication.
          format: date-time
          example: "2016-08-29T09:12:33.001Z"
        caption:
          description: Photo caption written by the user.
          type: string
          example: Bella giornata!
        publisher:
          description: Publisher of the photo.
          type: string
        likes:
          description: Likes of the photo.
          type: integer
          example: 123
    Comment:
      title: Comment
      description: Comment of a published photo.
      type: object
      properties:
        id:
          description: Comment unique identifier.
          type: integer
          example: 1234
        content:
          description: Text content of the comment.
          type: string
          example: Nice photo!
        publisher:
          description: User that published the comment
          $ref: "#/components/schemas/User"
