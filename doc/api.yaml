openapi: 3.0.2
info:
  description: API for WasaPhoto project
  version: 1.0.0
  title: WasaPhoto API
  contact:
    email: matiddi.1985899@studenti.uniroma1.it
servers:
  - url: http://localhost:3000

tags:
  - name: photos
    description: All related to photos
  - name: users
    description: All related to users
  - name: comments
    description: All related to comments
  - name: likes
    description: All related to likes
  - name: follows
    description: All related to follows
  - name: bans
    description: All related to bans
  - name: login
    description: All related to login

paths:
  /session/:
    post:
      security: []
      tags: ["login", "users"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: |-
          User details for login, composed
          only by the string representing the username.
        content:
          application/json:
            schema:
              type: object
              description: Object containing username string.
              properties:
                username:
                  type: string
                  example: "Maria"
                  pattern: ".*"
                  description: Username of the user trying to login.
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        "201":
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                description: Object containing user identifier.
                properties:
                  identifier:
                    description: |-
                      User unique identifier, 
                      integer utilization that corresponds 
                      as the one on the path.
                    type: integer
                    example: 1
        "500":
          $ref: "#/components/responses/InternalServerError"

  /photos/:
    post:
      operationId: uploadPhoto
      description: |-
        New photo upload, contains the file 
        and the caption in the additional data.
      summary: Upload a photo
      tags:
        - photos
      requestBody:
        required: true
        description: |-
          Request body for the photo, containing
          a form with the photo file and other information 
          for storing.
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Photo"
      responses:
        "201":
          $ref: "#/components/responses/Created"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /photos/{photoId}:
    parameters:
      - $ref: "#/components/parameters/photoId"
    get:
      operationId: getPhoto
      description: |-
        Get photo file for showing it on the frontend from. 
        Photo is obtained from the filesystem.
      summary: Photo file
      tags:
        - photos
      responses:
        "200":
          description: Photo returned successfully.
          content:
            img/jpg:
              schema:
                type: string
                format: binary
                description: The photo file from the filesystem.
                pattern: ".*"
                minLength: 1
                maxLength: 100000000000000
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      operationId: deletePhoto
      description: |-
        Delete photo operation that requires the id
        of the photo to be deleted and removes the file
        from filesystem and the entry from database.
      summary: Delete a photo
      tags:
        - photos
      responses:
        "200":
          $ref: "#/components/responses/OK"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /photos/{photoId}/likes/{userId}:
    parameters:
      - $ref: "#/components/parameters/photoId"
      - $ref: "#/components/parameters/userId"
    
    get:
      operationId: getLike
      description: Get if the photo is liked by the user.
      summary: Get like presence
      tags:
        - likes
      responses:
        "200":
          description: Like presence value returned successfully.
          content:
            application/json:
              schema:
                type: object
                description: Object containing the like status.
                properties:
                  isLiked:
                    type: boolean
                    description: Value determining if the like is present.
                    example: true    
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      operationId: likePhoto
      description: Put a like with the identifier of the user that put the like.
      summary: Add a like
      tags:
        - likes
      responses:
        "200":
          $ref: "#/components/responses/OK"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      operationId: unlikePhoto
      description: Remove like from the photo liked by the user.
      summary: Remove like
      tags:
        - likes
      responses:
        "200":
          $ref: "#/components/responses/OK"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /photos/{photoId}/comments/:
    parameters:
      - $ref: "#/components/parameters/photoId"

    get:
      operationId: getComments
      description: |- 
        Get all the comments of the 
        photo to show them when opening the modal.
      summary: Get comments
      tags:
        - comments
      responses:
        "200":
          description: Comment list returned successfully
          content:
            application/json:
              schema:
                type: object
                description: Object containing the comment list.
                properties:
                  CList:
                    type: array
                    description: The comments of the photo
                    items: { $ref: "#/components/schemas/CommentListElement" }
                    minItems: 0
                    maxItems: 50
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      operationId: commentPhoto
      description: Write a comment to add to the photo selected.
      summary: Add comment
      tags:
        - comments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Comment"
      responses:
        "201":
          $ref: "#/components/responses/Created"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /photos/{photoId}/comments/{commentId}:
    parameters:
      - $ref: "#/components/parameters/photoId"
      - $ref: "#/components/parameters/commentId"

    delete:
      operationId: uncommentPhoto
      description: |-
        Delete a comment from the
        photo selected that you have posted.
      summary: Remove comment
      tags:
        - comments
      responses:
        "200":
          $ref: "#/components/responses/OK"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /users/:
    get:
      operationId: searchUser
      description: |-
        Get lists of possible users
        that have username similar 
        to the one you are searching.
      summary: Get users listed
      tags:
        - users
      parameters:
        - $ref: "#/components/parameters/userName"
      responses:
        "200":
          description: User id found and returned.
          content:
            application/json:
              schema:
                type: object
                description: Object containing the user identifier.
                properties:
                  UList:
                    type: array
                    description: The users that matched the search.
                    items: { $ref: "#/components/schemas/User" }
                    minItems: 0
                    maxItems: 20
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /users/{userId}:
    parameters:
      - $ref: "#/components/parameters/userId"

    put:
      description: Set a new username for the user you are logged in as.
      summary: Set new username
      operationId: setMyUserName
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Object containing new username
              properties:
                username:
                  type: string
                  description: New name for the user.
                  minLength: 0
                  maxLength: 100
                  example: gabrimat
                  pattern: ".*"
      responses:
        "200":
          $ref: "#/components/responses/OK"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    get:
      operationId: getUserProfile
      tags:
        - users
      description: |-
        Obtain photos published by the user selected via
        the parameter in the link and also other data to show.
      summary: Get the user profile
      responses:
        "200":
          description: User profile returned successfully.
          content:
            application/json:
              schema:
                type: object
                description: The object containing all necessary elements to show the user profile.
                properties:
                  PList:
                    type: array
                    description: The ids of the photos in the array.
                    items: { $ref: "#/components/schemas/PhotoListElement" }
                    minItems: 0
                    maxItems: 20
                  userName:
                    type: string
                    description: Name of the user.
                    example: Maria
                    pattern: ".*"
                    minLength: 3
                    maxLength: 16
                  followCount:
                    type: integer
                    example: 0
                    description: Number of users that follow the user.
                  followedCount:
                    type: integer
                    example: 0
                    description: Number of users that the user follows.
                  photoCount:
                    type: integer
                    example: 0
                    description: Number of photos posted by the user.
                  isBanned:
                    type: boolean
                    example: true
                    description: If you banned the user.
                  isFollowed:
                    type: boolean
                    example: false
                    description: If you follow the user.
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /users/{userId}/stream/:
    parameters:
      - $ref: "#/components/parameters/userId"

    get:
      summary: Get user's feed
      description: Retrieve the feed of the specified user.
      operationId: getMyStream
      tags:
        - users
      responses:
        "200":
          description: Photo list returned successfully.
          content:
            application/json:
              schema:
                type: object
                description: Object containing elements of the feed.
                properties:
                  PList:
                    type: array
                    description: Array contain information to show for each photo.
                    items: { $ref: "#/components/schemas/PhotoStreamListElement" }
                    minItems: 0
                    maxItems: 20
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /users/{userId}/follows/{followId}:
    parameters:
      - $ref: "#/components/parameters/userId"
      - $ref: "#/components/parameters/followId"

    put:
      description: |-
        Put a follow with the id of the user
        followed in the follows of the user.
      summary: Follow a user
      operationId: followUser
      tags:
        - follows
      responses:
        "200":
          $ref: "#/components/responses/Created"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      description: Stop following the selected user.
      summary: Unfollow a user
      operationId: unfollowUser
      tags:
        - follows
      responses:
        "200":
          $ref: "#/components/responses/OK"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /users/{userId}/bans/{banId}:
    parameters:
      - $ref: "#/components/parameters/userId"
      - $ref: "#/components/parameters/banId"

    put:
      description: |-
        Ban the user you are currently viewing,
        stop showing your content and profile to him.
      summary: Ban a user
      operationId: banUser
      tags:
        - bans
      responses:
        "200":
          $ref: "#/components/responses/OK"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      description: Stop the ban relation with the user you are currently viewing.
      summary: Unban a user
      operationId: unbanUser
      tags:
        - bans
      responses:
        "200":
          $ref: "#/components/responses/OK"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

components:
  responses:
    OK:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ResponseMessage"
    Created:
      description: Created response.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ResponseMessage"
    NotFound:
      description: Not Found response.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            error:
              code: "NOT_FOUND"
              message: "Element not found."
    Unauthorized:
      description: Access token missing or not valid response.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            error:
              code: "UNAUTHORIZED"
              message: "Authorization token invalid or not present."
    Forbidden:
      description: Forbidden response.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            error:
              code: "FORBIDDEN"
              message: "Wrong authorization for the operation."
    BadRequest:
      description: Bad Request response.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            error:
              code: "BAD_REQUEST"
              message: "Bad request formatting."
    InternalServerError:
      description: Internal server error response.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            error:
              code: "INTERNAL_SERVER_ERROR"
              message: "An internal server error occurred."

  parameters:
    userName:
      in: query
      name: userName
      required: false
      description: Username of the user, a classic string.
      schema: 
        description: String representing the username.
        example: Gabriele
        type: string
        minLength: 3
        maxLength: 16
        pattern: ".*"
    photoId:
      in: path
      name: photoId
      required: true
      description: Photo identifier in the path.
      schema:
        description: Integer for the identifier of the photo.
        type: integer
    userId:
      in: path
      name: userId
      required: true
      description: Identifier of the user in the path.
      schema:
        description: Integer representing the identifier of the user.
        type: integer
    followId:
      in: path
      name: followId
      required: true
      description: User identifier for follower in the path.
      schema:
        description: Id of the user at the end of the follow relation.
        type: integer
    banId:
      in: path
      name: banId
      required: true
      description: User identifier for banned user.
      schema:
        description: Id of the user at the end of the ban relation.
        type: integer
    commentId:
      in: path
      name: commentId
      required: true
      description: Comment identifier in the path.
      schema:
        description: Id of the comment on the photo.
        type: integer
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: integer
  schemas:
    Error:
      type: object
      description: Error response made of error code and message.
      properties:
        code:
          type: string
          description: Code of the error.
          minLength: 0
          maxLength: 4
          pattern: ".*"
        message:
          type: string
          description: Message of the error.
          minLength: 0
          maxLength: 50
          pattern: ".*"
    ResponseMessage:
      type: object
      description: |-
        Response
        after endpoint running.
    User:
      title: User
      description: This object represent a user, comprised of Id and username.
      type: object
      properties:
        id:
          type: integer
          example: 1
          description: Identifier of the user. 
        username:
          type: string
          description: Name of the user registered in the system.
          minLength: 3
          maxLength: 20
          pattern: ".*"
          example: "Gabriele"
    Photo:
      title: Photo
      description: This object represents a photo in the system.
      type: object
      properties:
        file:
          type: string
          format: binary
          description: The photo file.
          minLength: 0
          maxLength: 100000000
          pattern: ".*"
        additionalData:
          type: object
          description: Additional information to store the photo.
          properties:
            Caption:
              description: Photo Caption written by the user.
              type: string
              example: Bella giornata!
              pattern: ".*"
              minLength: 0
              maxLength: 100
    PhotoListElement:
      title: PhotoListElement
      description: |-
        This object is a component of the photo list
        returned to represent a photo in the user profile.
      type: object
      properties:
        id:
          type: integer
          example: 1
          description: Identifier of the photo.
        likeCount:
          type: integer
          example: 0
          description: Amount of likes of the photo.
        publisherId:
          type: integer
          example: 2
          description: Identifier of the user that published the photo.
        caption:
          type: string
          description: Caption of the photo.
          example: Good day today!
          maxLength: 1000
          minLength: 0
          pattern: ".*"
        releaseDate:
          type: string
          format: date-time
          example: "2017-07-21T17:32:28Z"
          minLength: 20
          maxLength: 20
          description: Date of the photo upload.
    PhotoStreamListElement:
      title: PhotoListElement
      description: |-
        This object is a component of the photo
        list returned when viewing you stream.
      type: object
      properties:
        id:
          type: integer
          example: 1
          description: Identifier of the photo.
        likeCount:
          type: integer
          example: 0
          description: Amount of likes.
        publisherName:
          type: string
          example: gabrimat
          description: Name of the user that published the photo.
          minLength: 3
          maxLength: 16
          pattern: ".*"
        caption:
          type: string
          description: Caption of the photo in the stream.
          example: good day!
          maxLength: 1000
          minLength: 0
          pattern: ".*"
        releaseDate:
          type: string
          format: date-time
          example: "2017-07-21T17:32:28Z"
          minLength: 20
          maxLength: 20
          description: Date of the photo release.
    Comment:
      title: Comment
      description: Comment of a published photo.
      type: object
      properties:
        commentText:
          description: Text content of the comment.
          type: string
          example: Nice photo!
          minLength: 0
          maxLength: 1000
          pattern: ".*"
    CommentListElement:
      description: Element of the comment list.
      title: CommentListElement
      type: object
      properties:
        id:
          description: Identifier of the comment.
          type: integer
          example: 1
        photoId:
          description: Identifier of the photo which the comment belongs to.
          example: 1
          type: integer
        publisherId:
          description: Identifier of the user that published the comment.
          example : 1
          type: integer
        publisherName:
          description: Name of the user that published the comment.
          type: string
          example: Maria
          minLength: 3
          maxLength: 16
          pattern: ".*"
        commentText:
          description: Text content of the comment.
          type: string
          example: Nice photo!
          minLength: 0
          maxLength: 1000
          pattern: ".*"

security:
  - bearerAuth: []
