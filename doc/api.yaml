openapi: 3.0.2
info:
  description: API for WasaPhoto project
  version: 1.0.0
  title: WasaPhoto API
  contact:
    email: matiddi.1985899@studenti.uniroma1.it
servers:
  - url: http://localhost:3000

tags:
  - name: photos
    description: All related to photos
  - name: users
    description: All related to users
  - name: comments
    description: All related to comments
  - name: likes
    description: All related to likes
  - name: follows
    description: All related to follows
  - name: bans
    description: All related to bans
  - name: login
    description: All related to login

paths:
  /session/:
    post:
      security: []
      tags: ["login","users"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: string
              example: Maria
              pattern: ".*"
              description: Username of the user
              minLength: 3
              maxLength: 16
        required: true
      responses:
        "201":
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                description: Object containing user identifier.
                properties:
                  identifier:
                    description: User unique identifier.
                    type: integer
                    example: 1

  /photos/:
    post:
      operationId: uploadPhoto
      description: -|
        New photo upload, multiple photos possible.
      summary: Upload a new photo
      tags:
        - photos
      requestBody:
        required: true
        description: Request body for the photo
        content:
          multipart/form-data: 
            schema:            
              $ref: "#/components/schemas/Photo"
      responses:
        "201":
          $ref: "#/components/responses/Created"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /photos/{photoId}:
    parameters:
      - $ref: "#/components/parameters/photoId"
    get:
      operationId: getPhoto
      description: Get photo file for frontend
      summary: photo file
      tags:
        - photos
      responses:
        "200":
          description: Photo returned successfully
          content:
            img/jpg:
              schema:
                type: string
                format: binary
                description: the photo file
                pattern: ".*"
                minLength: 1
                maxLength: 100000000000000
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      operationId: deletePhoto
      description: Delete photo operation that requires the id of the photo to be deleted.
      summary: Delete a photo that exists.
      tags:
        - photos
      responses:
        "200":
          $ref: "#/components/responses/OK"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

  /photos/{photoId}/likes/{userId}:
    parameters:
      - $ref: "#/components/parameters/photoId"
      - $ref: "#/components/parameters/userId"

    put:
      operationId: likePhoto
      description: Put a like with the identifier of the user that put the like.
      summary: Add a like to the photo.
      tags:
        - likes
      responses:
        "201":
          $ref: "#/components/responses/Created"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

    delete:
      operationId: unlikePhoto
      description: Remove like from the photo liked by the user.
      summary: Remove like from the photo.
      tags:
        - likes
      responses:
        "200":
          $ref: "#/components/responses/OK"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

  /photos/{photoId}/comments/:
    parameters:
      - $ref: "#/components/parameters/photoId"
    
    get:
      operationId: getComments
      description: Get all the comments of the photo
      summary: get the comments
      tags:
        - comments
      responses:
        "200":
          description: Comment list returned successfully
          content:
            application/json:
              schema:
                type: array
                description: The comments of the photo
                items: { $ref: "#/components/schemas/CommentListElement" }
                minItems: 0
                maxItems: 50
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      
    post:
      operationId: commentPhoto
      description: Post a comment to the photo browsed.
      summary: Add a comment to the photo.
      tags:
        - comments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Comment"
      responses:
        "201":
          $ref: "#/components/responses/Created"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /photos/{photoId}/comments/{commentId}:
    parameters:
      - $ref: "#/components/parameters/photoId"
      - $ref: "#/components/parameters/commentId"

    delete:
      operationId: uncommentPhoto
      description: Delete a comment from the photo browsed via its unique identifier.
      summary: Remove comment from the photo.
      tags:
        - comments
      responses:
        "200":
          $ref: "#/components/responses/OK"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

  /users/{userId}:
    parameters:
      - $ref: "#/components/parameters/userId"

    put:
      description: Set a new username for the user if the necessary authorization is present.
      summary: Set username for a user.
      operationId: setMyUserName
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: string
              description: New name for the user.
              minLength: 0
              maxLength: 100
              example: gabrimat
              pattern: ".*"
      responses:
        "201":
          $ref: "#/components/responses/Created"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
    
    get:
      operationId: getUserProfile
      tags:
        - users
      description: Obtain photos published by the user selected via the parameter in the link and also other data.
      summary: Get the photos of the user and other data.
      responses:
        "200":
          description: user profile returned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  PList:
                    type: array
                    description: The ids of the photos in the array
                    items: { $ref: "#/components/schemas/PhotoListElement" }
                    minItems: 0
                    maxItems: 20
                  followCount:
                    type: integer
                    example: 0
                    description: number of users that follow the user
                  followedCount:
                    type: integer
                    example: 0 
                    description: number of users that the user follows
                  isBanned:
                    type: boolean
                    example: true
                    description: if you banned the user
                  isFollowed:
                    type: boolean
                    example: false
                    description: if you follow the user
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"


    delete:
      operationId: deleteUser
      description: Delete user if the necessary authorization is present.
      summary: Delete a user profile.
      tags:
        - users
      responses:
        "200":
          $ref: "#/components/responses/OK"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

  /users/{userId}/stream/:
    parameters:
      - $ref: "#/components/parameters/userId"

    get:
      summary: Get user's feed
      description: Retrieve the feed of the specified user.
      operationId: getMyStream
      tags:
        - users
      responses:
        "200":
          description: Photo list returned successfully
          content:
            application/json:
              schema:
                type: array
                description: The ids of the photos in the array
                items: { $ref: "#/components/schemas/PhotoListElement" }
                minItems: 0
                maxItems: 20
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

  /users/{userId}/follows/{followId}:
    parameters:
      - $ref: "#/components/parameters/userId"
      - $ref: "#/components/parameters/followId"

    put:
      description: Put a follow with the id of the user followed in the follows of the user.
      summary: Follow a user.
      operationId: followUser
      tags:
        - follows
      responses:
        "200":
          $ref: "#/components/responses/Created"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

    delete:
      description: Delete the follow from the follows of the user selected.
      summary: Unfollow a user.
      operationId: unfollowUser
      tags:
        - follows
      responses:
        "200":
          $ref: "#/components/responses/OK"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

  /users/{userId}/bans/{banId}:
    parameters:
      - $ref: "#/components/parameters/userId"
      - $ref: "#/components/parameters/banId"

    put:
      description: Put a ban with the id of the user banned in the list of the bans.
      summary: Ban a user.
      operationId: banUser
      tags:
        - bans
      responses:
        "201":
          $ref: "#/components/responses/Created"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

    delete:
      description: Delete the ban via user id from the ban list of the user.
      summary: Unban a user.
      operationId: unbanUser
      tags:
        - bans
      responses:
        "200":
          $ref: "#/components/responses/OK"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

components:
  responses:
    OK:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ResponseMessage"
    Created:
      description: Created
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ResponseMessage"
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ResponseMessage"
    Unauthorized:
      description: Access token missing
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ResponseMessage"
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ResponseMessage"
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ResponseMessage"

  parameters:
    photoId:
      in: path
      name: photoId
      required: true
      schema:
        description: Id of the photo.
        type: integer
    userId:
      in: path
      name: userId
      required: true
      schema:
        description: Id of the user.
        type: integer
    followId:
      in: path
      name: followId
      required: true
      schema:
        description: Id of the user at the end of the follow relation.
        type: integer
    banId:
      in: path
      name: banId
      required: true
      schema:
        description: Id of the user at the end of the ban relation.
        type: integer
    commentId:
      in: path
      name: commentId
      required: true
      schema:
        description: Id of the comment on the photo.
        type: integer
  securitySchemes:
    bearerAuth:          
      type: http
      scheme: bearer
      bearerFormat: integer    
  schemas:
    ResponseMessage:
      type: object
      description: General response
      properties:
        code:
          type: string
          description: Code of the response.
          minLength: 0
          maxLength: 4
          example: "404"
          pattern: ".*"
        message:
          type: string
          description: Message of the response.
          minLength: 0
          maxLength: 1000
          example: "Error element not found"
          pattern: ".*"
    Photo:
      title: Photo
      description: This object represents a photo in the system.
      type: object
      properties:
        file:
          type: string
          format: binary
          description: The photo file
          example: 1010
          minLength: 0
          maxLength: 100000000
          pattern: ".*"
        additionalData:
          type: object
          description: additional information
          properties:
            Caption:
              description: Photo Caption written by the user.
              type: string
              example: Bella giornata!
              pattern: ".*"
              minLength: 0
              maxLength: 100
    PhotoListElement:
      title: PhotoListElement
      description: This object is a component of the photo list returned 
      type: object
      properties:
        id:
          type: integer
          example: 1
          description: id of the photo
        likeCount:
          type: integer
          example: 0
          description: amount of likes
        publisherId:
          type: integer
          example: 2
          description: id of the user that published the photo
        caption:
          type: string
          description: caption of the photo in the list
          example: daje
          maxLength: 1000
          minLength: 0
          pattern: ".*"
        releaseDate:
          type: string
          format: date-time
          example: '2017-07-21T17:32:28Z'
          minLength: 20
          maxLength: 20
          description: date of the photo release 
    Comment:
      title: Comment
      description: Comment of a published photo.
      type: object
      properties:
        commentText:
          description: Text content of the comment.
          type: string
          example: Nice photo!
          minLength: 0
          maxLength: 1000
          pattern: ".*"
    CommentListElement:
      description: element of the comment list
      title: CommentListElement
      type: object
      properties:
        publisherId:
          description: id of the user that published the comment
          type: integer
          example: 1
        commentText:          
          description: Text content of the comment.
          type: string
          example: Nice photo!
          minLength: 0
          maxLength: 1000
          pattern: ".*"
        

security:
  - bearerAuth: []
